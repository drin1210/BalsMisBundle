<?php

namespace Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class BalsMisBundleEntityLearnerProxy extends \Bals\MisBundle\Entity\Learner implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }
    
    
    public function getId()
    {
        $this->__load();
        return parent::getId();
    }

    public function setFirstName($firstName)
    {
        $this->__load();
        return parent::setFirstName($firstName);
    }

    public function getFirstName()
    {
        $this->__load();
        return parent::getFirstName();
    }

    public function setLastName($lastName)
    {
        $this->__load();
        return parent::setLastName($lastName);
    }

    public function getLastName()
    {
        $this->__load();
        return parent::getLastName();
    }

    public function setMiddleName($middleName)
    {
        $this->__load();
        return parent::setMiddleName($middleName);
    }

    public function getMiddleName()
    {
        $this->__load();
        return parent::getMiddleName();
    }

    public function setBirthdate($birthdate)
    {
        $this->__load();
        return parent::setBirthdate($birthdate);
    }

    public function getBirthdate()
    {
        $this->__load();
        return parent::getBirthdate();
    }

    public function setGender($gender)
    {
        $this->__load();
        return parent::setGender($gender);
    }

    public function getGender()
    {
        $this->__load();
        return parent::getGender();
    }

    public function setHouseholdPosition($householdPosition)
    {
        $this->__load();
        return parent::setHouseholdPosition($householdPosition);
    }

    public function getHouseholdPosition()
    {
        $this->__load();
        return parent::getHouseholdPosition();
    }

    public function setCivilStatus($civilStatus)
    {
        $this->__load();
        return parent::setCivilStatus($civilStatus);
    }

    public function getCivilStatus()
    {
        $this->__load();
        return parent::getCivilStatus();
    }

    public function setCLCEnlisted($cLCEnlisted)
    {
        $this->__load();
        return parent::setCLCEnlisted($cLCEnlisted);
    }

    public function getCLCEnlisted()
    {
        $this->__load();
        return parent::getCLCEnlisted();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'First_Name', 'Last_Name', 'Middle_Name', 'Birthdate', 'Gender', 'Household_Position', 'Civil_Status', 'CLC_Enlisted');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}