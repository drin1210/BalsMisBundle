<?php

namespace Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class BalsMisBundleEntityAcademicProfileProxy extends \Bals\MisBundle\Entity\AcademicProfile implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }
    
    
    public function getId()
    {
        $this->__load();
        return parent::getId();
    }

    public function setLearnersId($learnersId)
    {
        $this->__load();
        return parent::setLearnersId($learnersId);
    }

    public function getLearnersId()
    {
        $this->__load();
        return parent::getLearnersId();
    }

    public function setProgramName($programName)
    {
        $this->__load();
        return parent::setProgramName($programName);
    }

    public function getProgramName()
    {
        $this->__load();
        return parent::getProgramName();
    }

    public function setProgramCategory($programCategory)
    {
        $this->__load();
        return parent::setProgramCategory($programCategory);
    }

    public function getProgramCategory()
    {
        $this->__load();
        return parent::getProgramCategory();
    }

    public function setModality($modality)
    {
        $this->__load();
        return parent::setModality($modality);
    }

    public function getModality()
    {
        $this->__load();
        return parent::getModality();
    }

    public function setDateEnlisted($dateEnlisted)
    {
        $this->__load();
        return parent::setDateEnlisted($dateEnlisted);
    }

    public function getDateEnlisted()
    {
        $this->__load();
        return parent::getDateEnlisted();
    }

    public function setAssignedFacilitator($assignedFacilitator)
    {
        $this->__load();
        return parent::setAssignedFacilitator($assignedFacilitator);
    }

    public function getAssignedFacilitator()
    {
        $this->__load();
        return parent::getAssignedFacilitator();
    }

    public function setScore($score)
    {
        $this->__load();
        return parent::setScore($score);
    }

    public function getScore()
    {
        $this->__load();
        return parent::getScore();
    }

    public function setStatus($status)
    {
        $this->__load();
        return parent::setStatus($status);
    }

    public function getStatus()
    {
        $this->__load();
        return parent::getStatus();
    }

    public function setStatusAfterProgram($statusAfterProgram)
    {
        $this->__load();
        return parent::setStatusAfterProgram($statusAfterProgram);
    }

    public function getStatusAfterProgram()
    {
        $this->__load();
        return parent::getStatusAfterProgram();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'Learners_id', 'Program_name', 'Program_Category', 'Modality', 'Date_Enlisted', 'Assigned_Facilitator', 'Score', 'Status', 'Status_AfterProgram');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}